substitutions:
  device_name: Turntable
  devicename: "turntable"
  
esp32:
  board: esp32dev
  framework:
    type: esp-idf

bluetooth_proxy:
#esp32_ble_tracker:

ble_client:
  - mac_address: !secret turntable_mac_address
    id: turntable
    auto_connect: true

    on_connect:
      - component.update: notify
      - delay: 200ms
      # 1) Query firmware version: "@0?PTSTVN\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x3F,0x50,0x54,0x53,0x54,0x56,0x4E,0x0D,0x0A]
      - delay: 50ms
      # 2) Query speed: "@0?PTTTRS\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x3F,0x50,0x54,0x54,0x54,0x52,0x53,0x0D,0x0A]
      - delay: 50ms
      # 3) Query play/stop state: "@0?PTTTST\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x3F,0x50,0x54,0x54,0x54,0x53,0x54,0x0D,0x0A]
      - delay: 50ms
      # 4) Query repeat count: "@0?PTTTRP\r\n" (Setting), "@0?PTTTRp\r\n" (current)
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x3F,0x50,0x54,0x54,0x54,0x52,0x50,0x0D,0x0A]
      - delay: 50ms
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40, 0x30, 0x3F, 0x50, 0x54, 0x54, 0x54, 0x52, 0x70, 0x0D, 0x0A]
      - delay: 50ms
      # 5) Query repeat on/off: "@0?PTTTLS\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x3F,0x50,0x54,0x54,0x54,0x4C,0x53,0x0D,0x0A]
      # 6) Query sleep timer: "@0?PTTTSL\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40, 0x30, 0x3F, 0x50, 0x54, 0x53, 0x54, 0x53, 0x4C, 0x0D, 0x0A]
      - delay: 50ms
      # Query pairing button state: "@0?PTBTST\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x3F,0x50,0x54,0x42,0x54,0x4C,0x54,0x0D,0x0A]
      

    on_disconnect:
      - delay: 5s
      - ble_client.connect: turntable


esphome:
  name: ${devicename}
  friendly_name: ${device_name}
  comment: Used to control your ${device_name} standing desk via Home Assistant.

  on_boot:
    then:
      - delay: 2s
      - ble_client.connect: turntable

api:
  encryption:
    key: !secret encryption_key_turntable

ota:
  password: !secret ota_password
  platform: esphome

safe_mode:
 num_attempts: 5

# Disable logging over serial
logger:
  level: INFO #DEBUG
  #baud_rate: 0

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: ${devicename} Fallback Hotspot
    password: !secret ap_fallback_password

sensor:
  - platform: wifi_signal
    name: "${devicename} WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: Uptime

  - platform: template
    name: "Repeat Remaining"
    id: repeat_remaining
    unit_of_measurement: ""
    icon: mdi:counter
    accuracy_decimals: 0
    entity_category: "diagnostic"
    lambda: |-
      // Force it to be an integer-returning float:
      return id(repeat_remaining_val);

  - platform: template
    name: "Sleep Timer (0 = never)"
    id: sleep_timer_sensor
    unit_of_measurement: "s"
    icon: mdi:timer-sand
    accuracy_decimals: 0
    entity_category: "diagnostic"
    lambda: |-
      // stored value is in 10s-units
      return id(sleep_timer_val) * 10;

text_sensor:
  - platform: ble_client
    ble_client_id: turntable
    service_uuid: "FFF0"
    characteristic_uuid: "FFF1"
    notify: true
    id: notify
    internal: true

    on_notify:
      then:
        - lambda: |-
            std::string msg = x;
            ESP_LOGD("ble_notify", "Received BLE message: '%s'", msg.c_str());
            int L = msg.size();
            int code = (msg[L - 4] - '0') * 10 + (msg[L - 3] - '0');

            // FIRMWARE "@0PTSTVN…(x.yz)\r\n"
            if (msg.rfind("@0PTSTVN", 0) == 0 && L > 10) {
              size_t p1 = msg.find('(');
              size_t p2 = msg.find(')', p1 == std::string::npos ? 0 : p1);
              if (p1 != std::string::npos && p2 != std::string::npos && p2 > p1) {
                std::string fw = msg.substr(p1 + 1, p2 - p1 - 1);
                id(firmware_val) = fw;
                id(firmware).publish_state(fw);
                ESP_LOGD("ble_notify", "→ Parsed Firmware: %s", fw.c_str());
              }
            }

            // SLEEP‐TIMER "@0PTSTSLxxx\r\n"
            else if (msg.rfind("@0PTSTSL", 0) == 0) {
              int units10s = (msg[L - 5] - '0') * 100
                           + (msg[L - 4] - '0') * 10
                           + (msg[L - 3] - '0');
              id(sleep_timer_val) = units10s;
              id(sleep_timer_sensor).publish_state(units10s * 10);
              id(sleep_timer).publish_state(units10s);
              ESP_LOGD("ble_notify",
                       "→ Parsed Sleep Timer = %03d (→ %d s)",
                       units10s, units10s * 10);
            }

            // SPEED "@0PTTTRSxx"
            if (msg.rfind("@0PTTTRS", 0) == 0) {
              id(speed_val) = code;

              std::string speed_str = std::to_string(code) + " RPM";
              id(speed).publish_state(speed_str);

              //FORFAN: otherwise it would start the player when it justs read the current speed (f.e. on every restart and speed change)
              uint8_t idx = (code == 33 ? 1 : code == 45 ? 2 : 3);
              if (id(playing_state).state == "Playing") {
                id(turntable_fan).turn_on().set_speed(idx).perform();
              } else {
                id(turntable_fan).turn_off().set_speed(idx).perform();
              }
            }

            // STATUS (PLAY/STOP/STARTING/STOPPING) "@0PTTTSTxx\r\n"
            if (msg.rfind("@0PTTTST", 0) == 0) {
              // Compose new “Status” string:
              if (code == 0) {
                id(playing_state).publish_state("Stopped");
                //FORFAN
                id(turntable_fan).turn_off().perform();
              } else if (code == 1) {
                id(playing_state).publish_state("Playing");
                //FORFAN
                id(turntable_fan).turn_on().perform();
              } else if (code == 3) {
                id(playing_state).publish_state("Starting…");
              } else if (code == 4) {
                id(playing_state).publish_state("Stopping…");
              } 

              ESP_LOGD("ble_notify", "→ Parsed Play/Stop: code=%02d",
                       code);
            }
            
            // REPEAT ON or OFF (TLSxx) — clear “got total” only once here
            else if (msg.rfind("@0PTTTLS", 0) == 0) {
              bool rpt = (code != 0);
              id(repeat_val) = rpt;
            }
            // REPEAT TOTAL: catch exactly “@0PTTTRPxx”
            if (msg.rfind("@0PTTTRP", 0) == 0) {
              id(repeat_setting_val) = code;
              id(repeat_count).publish_state(code);
            }
            // REPEAT REMAINING: catch “@0PTTTRpxx” (lowercase “p”)
            if (msg.rfind("@0PTTTRp", 0) == 0) {
              id(repeat_remaining_val) = code;
              id(repeat_remaining).publish_state(code);
            }
            
            // BLUETOOTH PAIRING "0PTBTLT"
            if (msg.rfind("@0PTBTLT", 0) == 0) {
                unsigned long now = millis();
                if (code != id(last_btlt)) {
                    // capture previous timestamp and current
                    unsigned long prev_time = id(last_change);
                    unsigned long now       = millis();
                
                    // update codes and timestamps
                    id(prev_btlt)      = id(last_btlt);
                    id(last_btlt)      = code;
                    id(last_change)    = now;
                    id(last_scheduled) = now;
                
                    // only treat as blinking if alternation is faster than 500 ms
                    unsigned long delta = now - prev_time;
                    if (delta < 500 && id(prev_btlt) != -1) {
                        // Off ↔ Blue?
                        if ((id(prev_btlt) == 0 && code == 1) ||
                            (id(prev_btlt) == 1 && code == 0)) {
                            id(bluetooth_connection_state).publish_state("Connecting…"); // = Blinking Off/Blue LED
                        }
                        // Blue ↔ Red?
                        else if ((id(prev_btlt) == 1 && code == 2) ||
                                 (id(prev_btlt) == 2 && code == 1)) {
                            id(bluetooth_connection_state).publish_state("Pairing…"); // = Blinking Blue/Red LED
                        }
                    }
                }
            }
        - script.execute: ble_connected_check

  - platform: template
    name: "Bluetooth"
    id: bluetooth_connection_state
    icon: mdi:bluetooth

  - platform: template
    name: "Current State"
    id: playing_state
    icon: mdi:play-pause

  - platform: template
    name: "Firmware"
    id: firmware
    icon: mdi:chip

script:
  - id: ble_connected_check
    mode: restart
    then:
      - delay: 3000ms
      - lambda: |-
          // only publish SOLID if no new PTBTLT in the last 2 s
          if (id(last_change) == id(last_scheduled)) {
            if (id(last_btlt) == 1) {
              id(bluetooth_connection_state).publish_state("Connected"); // = Solid Blue LED
            }
            else if (id(last_btlt) == 2) {
              id(bluetooth_connection_state).publish_state("Disconnected"); // = Solid Red LED
            }
          }

button:
  - platform: template
    name: "Pairing Toggle"
    icon: mdi:bluetooth
    id: bluetooth_connect_toggle
    internal: true
    on_press:
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x50,0x54,0x42,0x54,0x53,0x54,0x30,0x31,0x0D,0x0A] # "@0PTBTS01\r\n"
      - delay: 150ms
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x50,0x54,0x42,0x54,0x53,0x54,0x30,0x30,0x0D,0x0A] # "`@0PTBTS00\r\n"
      - component.update: notify
      
  - platform: template
    name: "Pairing Long Press"
    icon: mdi:bluetooth-connect
    id: bluetooth_pairing_button
    internal: true
    on_press:
      # 1) Simulate press-down (this stamps pairing_last_off)
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x50,0x54,0x42,0x54,0x53,0x54,0x30,0x31,0x0D,0x0A]  # "@0PTBTS01\r\n"
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40,0x30,0x50,0x54,0x42,0x54,0x4C,0x54,0x30,0x31,0x0D,0x0A]  # "@0PTBTLT01\r\n"
      - component.update: notify

  - platform: restart
    name: "Restart"
    entity_category: "config"

switch:
  - platform: template
    name: "Repeat"
    id: repeat_switch
    icon: mdi:repeat-variant
    optimistic: false

    lambda: |-
      return id(repeat_val);

    turn_on_action:
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40, 0x30, 0x50, 0x54, 0x54, 0x54, 0x4C, 0x53, 0x30, 0x31, 0x0D, 0x0A]
    turn_off_action:
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: [0x40, 0x30, 0x50, 0x54, 0x54, 0x54, 0x4C, 0x53, 0x30, 0x30, 0x0D, 0x0A]

  - platform: template
    name: "Bluetooth"
    id: bluetooth_connect_switch
    icon: mdi:bluetooth-connect
    optimistic: false

    lambda: |-
      {
        const std::string &st = id(bluetooth_connection_state).state;
        return (st == "Connected" || st == "Connecting…");
      }

    turn_on_action:
      - button.press: bluetooth_connect_toggle
    turn_off_action:
      - button.press: bluetooth_connect_toggle
      
  - platform: template
    name: "Bluetooth Pairing"
    id: bluetooth_pairing_switch
    icon: mdi:bluetooth-connect
    optimistic: false

    lambda: |-
      return (id(bluetooth_connection_state).state == "Pairing…");

    turn_on_action:
      - button.press: bluetooth_pairing_button
    turn_off_action:
      - button.press: bluetooth_connect_toggle

  - platform: template
    name: "BLE Connection"
    icon: mdi:bluetooth
    entity_category: config
    optimistic: false
    lambda: |-
      // Reflect the actual BLE client connection state
      return id(turntable).connected();
    turn_on_action:
      - ble_client.connect: turntable
      - delay: 1000ms
    turn_off_action:
      - ble_client.disconnect: turntable
      - delay: 200ms

globals:
  - id: speed_val
    type: int
    restore_value: no
    initial_value: ""
  - id: repeat_val
    type: int
    restore_value: no
    initial_value: "0"
  - id: repeat_setting_val
    type: int
    restore_value: no
    initial_value: "0"
  - id: repeat_remaining_val
    type: int
    initial_value: '0'
    restore_value: no
  - id: sleep_timer_val
    type: int
    restore_value: no
    initial_value: "0"
  - id: firmware_val
    type: std::string
    restore_value: no
    initial_value: ""
  - id: last_btlt
    type: int
    restore_value: no
    initial_value: "-1"
  - id: prev_btlt
    type: int
    restore_value: no
    initial_value: "-1"
  - id: last_change
    type: unsigned long
    restore_value: no
    initial_value: "0"
  - id: last_scheduled
    type: unsigned long
    restore_value: no
    initial_value: "0"

number:
  - platform: template
    name: "Repeat Count"
    id: repeat_count
    icon: mdi:repeat-once
    min_value: 0
    max_value: 99 # more than 99 isn't possible
    step: 1
    optimistic: false
    lambda: |-
      return id(repeat_setting_val);
    set_action:
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: !lambda |-
            char buf[16];
            int len = snprintf(buf, sizeof(buf),
                              "@0PTTTRP%02d\r\n", int(x));
            return std::vector<uint8_t>(buf, buf + len);
      - component.update: notify

  - platform: template
    name: "Sleep Timer (10s units; 0 = never)"
    id: sleep_timer
    icon: mdi:sleep
    min_value: 0
    max_value: 255   # → 180×10 s = 1800 s = 30 minutes; more than 255 (= 42 min. and 30 sek.) is not possible to set (if you send it it repeats the last setted value)
    step: 1
    optimistic: false

    lambda: |-
      return id(sleep_timer_val);

    set_action:
      - ble_client.ble_write:
          id: turntable
          service_uuid: "FFF0"
          characteristic_uuid: "FFF2"
          value: !lambda |-
            char buf[16];
            int len = snprintf(buf, sizeof(buf),
                                "@0PTSTSL%03d\r\n", int(x));
            return std::vector<uint8_t>(buf, buf + len);
      - delay: 200ms
      - component.update: notify

select:
  - platform: template
    name: "Speed"
    id: speed
    icon: mdi:speedometer
    optimistic: false

    options:
      - "33 RPM"
      - "45 RPM"
      - "78 RPM"

    lambda: |-
      char buf[16];
      snprintf(buf, sizeof(buf), "%d RPM", id(speed_val));
      ESP_LOGD("speed_select", "Returning: '%s'", buf);
      return std::string(buf);

    set_action:
      then:
        - lambda: |-
            if (x == "33 RPM")   id(speed_val) = 33;
            else if (x == "45 RPM")  id(speed_val) = 45;
            else if (x == "78 RPM")  id(speed_val) = 78;

        - ble_client.ble_write:
            id: turntable
            service_uuid: "FFF0"
            characteristic_uuid: "FFF2"
            value: !lambda |-
              char buf[16];
              int len = snprintf(
                buf, sizeof(buf),
                "@0PTTTRS%02d\r\n",
                id(speed_val)
              );
              return std::vector<uint8_t>(buf, buf + len);

        - delay: 50ms
        - component.update: notify

fan:
  - platform: template
    id: turntable_fan
    name: "Turntable"
    icon: mdi:album
    speed_count: 3
    
    on_turn_on:
      then:
        # If stopped, turn it on; otherwise only set the speed (there is no optimistic: false for the fan entity)
        - if:
            condition:
              lambda: |-
                return (id(playing_state).state == "Stopped");
            then:
              - ble_client.ble_write:
                  id: turntable
                  service_uuid: "FFF0"
                  characteristic_uuid: "FFF2"
                  value: [0x40, 0x30, 0x50, 0x54, 0x54, 0x54, 0x53, 0x54, 0x30, 0x31, 0x0D, 0x0A]
              - fan.turn_on:
                  id: turntable_fan
                  speed: !lambda |-
                    int rpm = id(speed_val);
                    if (rpm == 33) return 1;
                    if (rpm == 45) return 2;
                    if (rpm == 78) return 3;
                    return 1;
            else:
              - ble_client.ble_write:
                  id: turntable
                  service_uuid: "FFF0"
                  characteristic_uuid: "FFF2"
                  value: !lambda |-
                    char buf[16];
                    int len = snprintf(buf, sizeof(buf),
                                      "@0PTTTRS%02d\r\n",
                                      id(speed_val));
                    return std::vector<uint8_t>(buf, buf + len);
              - delay: 50ms
              - component.update: notify

    on_turn_off:
      then:
        - if:
            condition:
              lambda: |-
                return (id(playing_state).state == "Playing");
            then:
              - ble_client.ble_write:
                  id: turntable
                  service_uuid: "FFF0"
                  characteristic_uuid: "FFF2"
                  value: [0x40, 0x30, 0x50, 0x54, 0x54, 0x54, 0x53, 0x54, 0x30, 0x30, 0x0D, 0x0A]

    on_speed_set:
      then:
        - lambda: |-
            int rpm;
            if (x == 1) rpm = 33;
            else if (x == 2) rpm = 45;
            else if (x == 3) rpm = 78;
            id(speed_val) = rpm;
        - ble_client.ble_write:
            id: turntable
            service_uuid: "FFF0"
            characteristic_uuid: "FFF2"
            value: !lambda |-
              char buf[16];
              int len = snprintf(buf, sizeof(buf),
                                 "@0PTTTRS%02d\r\n",
                                 id(speed_val));
              return std::vector<uint8_t>(buf, buf + len);
        - delay: 50ms
        - component.update: notify
